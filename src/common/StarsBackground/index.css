.stars-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    /* So clicks pass through */
    overflow: hidden;
    z-index: 0;
    /* below main content */
}

/* Tiny glowing dots (stars) */
.stars-overlay::before,
.stars-overlay::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 200%;
    height: 200%;
    background: transparent;
    box-shadow:
        10vw 20vh #fff,
        30vw 10vh var(--palette-1, #de3f52),
        60vw 70vh var(--palette-2, #a81c66),
        80vw 40vh var(--palette-3, #ee5b48),
        50vw 80vh var(--palette-4, #b82152),
        20vw 60vh #fff,
        90vw 30vh var(--palette-3, #ee5b48),
        40vw 90vh var(--palette-2, #a81c66);
    border-radius: 50%;
    animation: twinkle 4s infinite ease-in-out alternate;
    opacity: 1;
}

/* Create a depth illusion */
.stars-overlay::after {
    transform: translate(-25%, -25%) scale(0.9);
    opacity: 0.8;
    animation-delay: 2s;
}

/* Blinking / Twinkling stars */
@keyframes twinkle {

    0%,
    100% {
        opacity: 0.2;
        transform: scale(1);
    }

    50% {
        opacity: 1;
        transform: scale(1.2);
    }
}

/* Individual star elements generated by the component */
.stars-overlay .star {
    position: absolute;
    display: block;
    border-radius: 50%;
    /* bright core with a tighter glow; spikes are drawn with pseudo-elements */
    width: var(--star-size, 2px);
    height: var(--star-size, 2px);
    background: #fff;
    box-shadow: 0 0 var(--glow-radius, 12px) 2px var(--glow-color, rgba(255, 255, 255, 0.9));
    transform-origin: center center;
    opacity: 1;
    mix-blend-mode: screen;
    will-change: opacity, transform;
    animation-name: star-twinkle, subtle-move;
    animation-timing-function: ease-in-out;
    animation-iteration-count: infinite;
}

/* Soft radial halo behind each star to add beauty */
.stars-overlay .star::after {
    content: "";
    position: absolute;
    left: 50%;
    top: 50%;
    width: calc(var(--glow-radius, 12px) * 2);
    height: calc(var(--glow-radius, 12px) * 2);
    transform: translate(-50%, -50%);
    border-radius: 50%;
    background: radial-gradient(circle, rgba(255, 255, 255, var(--halo-alpha, 0.12)) 0%, rgba(255, 255, 255, 0) 60%);
    filter: blur(4px);
    pointer-events: none;
    mix-blend-mode: screen;
    will-change: opacity, transform;
    animation: halo-pulse 4s ease-in-out infinite;
}

@keyframes halo-pulse {

    0%,
    100% {
        opacity: 0.85;
        transform: translate(-50%, -50%) scale(1);
    }

    50% {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1.06);
    }
}

/* Spikes removed per user request. Stars keep a bright core and subtle glow. */

/* small slow movement to give parallax/float feel */
@keyframes subtle-move {
    0% {
        transform: translateY(0) scale(1);
    }

    50% {
        transform: translateY(-6px) scale(1.1);
    }

    100% {
        transform: translateY(0) scale(1);
    }
}

@keyframes star-twinkle {

    0%,
    100% {
        opacity: 0.6;
        filter: blur(0px);
    }

    40% {
        opacity: 1;
        filter: blur(1.2px);
    }

    60% {
        opacity: 0.95;
        filter: blur(0px);
    }
}

/* Respect reduced motion preferences */
@media (prefers-reduced-motion: reduce) {

    .stars-overlay .star,
    .stars-overlay::before,
    .stars-overlay::after {
        animation: none !important;
        transition: none !important;
    }
}

/* While the user is actively scrolling quickly, pause animations and
   reduce filters/shadows to avoid heavy repaints. The JS adds
   `.is-scrolling` to the overlay during scroll bursts. */
.stars-overlay.is-scrolling,
.stars-overlay.is-scrolling::before,
.stars-overlay.is-scrolling::after,
.stars-overlay.is-scrolling .star,
.stars-overlay.is-scrolling .star::after {
    /* stop CSS animations */
    animation-play-state: paused !important;
    transition: none !important;
    /* avoid filters and expensive painting during scroll */
    filter: none !important;
    box-shadow: none !important;
    will-change: auto !important;
}

/* Ensure the overlay remains behind main content; the app content can use z-index > 0 */
.stars-overlay {
    z-index: 0;
}